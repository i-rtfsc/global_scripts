#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# -*- encoding: utf-8 -*-
#
# Copyright (c) 2023 anqi.huang@outlook.com
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


import os
import subprocess


def file_exists(file):
    exists = os.path.isfile(file) and os.path.exists(file)
    return exists


def dir_exists(file):
    exists = os.path.isdir(file) and os.path.exists(file)
    return exists


def main():
    gs_config_path = os.getenv("_GS_CONFIG_PATH")
    if gs_config_path is None or dir_exists(gs_config_path) is False:
        gs_config_path = os.path.join(os.getenv("HOME"), "code/github/global_scripts/conf")
    else:
        print(gs_config_path)

    gs_config_ssh = os.path.join(gs_config_path, "gs_ssh")
    if dir_exists(gs_config_ssh) is False:
        print("{} don't exists".format(gs_config_ssh))
        return 0

    dest = os.path.join(os.getenv("HOME"), ".ssh")

    # Check if template files exist
    templates = {
        "id_rsa.template": "id_rsa",
        "id_rsa.pub.template": "id_rsa.pub", 
        "config.template": "config"
    }
    
    # Copy template files if actual files don't exist
    for template, actual in templates.items():
        template_path = os.path.join(gs_config_ssh, template)
        actual_path = os.path.join(gs_config_ssh, actual)
        
        if file_exists(template_path) and not file_exists(actual_path):
            print("WARNING: {} not found. Please copy {} to {} and edit with your actual settings".format(
                actual, template, actual))
            print("Command: cp {} {}".format(template_path, actual_path))
            continue

    # Create .ssh directory if it doesn't exist
    if not dir_exists(dest):
        os.makedirs(dest, mode=0o700)

    # Copy SSH files (excluding templates and README)
    for filename in os.listdir(gs_config_ssh):
        if filename.endswith('.template') or filename == 'README.md':
            continue
            
        src_file = os.path.join(gs_config_ssh, filename)
        dest_file = os.path.join(dest, filename)
        
        if file_exists(src_file):
            cmd = "cp {} {}".format(src_file, dest_file)
            ret, output = subprocess.getstatusoutput(cmd)
            if ret != 0:
                print("cp {} error: {}".format(filename, output))

    # Set proper permissions
    private_key = os.path.join(dest, "id_rsa")
    if file_exists(private_key):
        cmd = "chmod 600 {}".format(private_key)
        ret, output = subprocess.getstatusoutput(cmd)
        if ret != 0:
            print("chmod 600 id_rsa error: {}".format(output))

    return 1


if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        exit()
